// Mocks generated by Mockito 5.4.0 from annotations
// in exam_mobii/test/store_test/user_store_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:exam_mobii/data/domain/result/result.dart' as _i2;
import 'package:exam_mobii/data/domain/user/user.dart' as _i5;
import 'package:exam_mobii/data/repository/user_repository/i_user_repository.dart'
    as _i6;
import 'package:exam_mobii/data/services/user_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IUserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserService extends _i1.Mock implements _i3.IUserService {
  MockIUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.User>> getUsers() => (super.noSuchMethod(
        Invocation.method(
          #getUsers,
          [],
        ),
        returnValue: _i4.Future<List<_i5.User>>.value(<_i5.User>[]),
      ) as _i4.Future<List<_i5.User>>);
}

/// A class which mocks [IUserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserRepository extends _i1.Mock implements _i6.IUserRepository {
  MockIUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<List<_i5.User>>> getUsers() => (super.noSuchMethod(
        Invocation.method(
          #getUsers,
          [],
        ),
        returnValue: _i4.Future<_i2.Result<List<_i5.User>>>.value(
            _FakeResult_0<List<_i5.User>>(
          this,
          Invocation.method(
            #getUsers,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i5.User>>>);
}
